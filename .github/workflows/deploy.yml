name: docker, ci/cd, ec2, hub

on:
    push:
        branches:
            - dev

jobs:
    docker-cicd:
        runs-on: ubuntu-latest
        steps:
            # 소스코드 체크아웃
            - name: 소스코드 체크아웃
              uses: actions/checkout@v4

            # jdk 17 설치
            - name: jdk 17 설치
              uses: actions/setup-java@v4
              with:
                java-version: '17'
                distribution: 'temurin'

            # 필요시 현재까지 환경 수시 확인 가능
            - name: 현대 상황 체크
              run: |
                  pwd
                  ls

            # 환경변수 동적 세팅 X(여기서는 제외)
            # 빌드, 단위 테스트 -> 편의상 개발자 pc에서 (프,백)선행수행(생략)
            # 도커 관련 액션 -> 도커 작업을 위한 환경
            - name: 도커 관련 작업을 진행하기 위한 환경
              uses: docker/setup-buildx-action@v3

            # 도커 허브 -> 프로필 ->...액세스 토큰 발급  
            # 토큰 발급 : 프로필 -> account setting -> Security Personal access tokens 
            # -> Generate new token -> 적당한 이름 / 만료기간 / 권한 설정(전체) -> 토큰 생성
            # 도커 허브 로그인 -> 계정 정보 -> 시크릿 변수
            - name: 도커 허브 로그인
              run : echo "${{secrets.HUB_DOCKER_TOKEN}}" | docker login -u "${{secrets.HUB_DOCKER_NAME}}" --password-stdin


            # 백엔드 이미지 생성 -> 허브(레포지토리) 푸시
            - name: 백엔드 이미지 생성 -> 허브(레포지토리) 푸시
              run: |
                docker build -t shining17/demo_backend ./backend
                docker push shining17/demo_backend


            # 프론트 이미지 생성 -> 허브(레포지토리) 푸시
            - name: 프론트 이미지 생성 -> 허브(레포지토리) 푸시
              run: |
                docker build -t shining17/demo_frontend ./frontend
                docker push shining17/demo_frontend

            # EC2 서버로 필요 파일 업로드(YML, nginx/*.conf)
            # EC2 생성 -> 탄력적 IP 연결 -> 활성화 이후
            # EC2 접속
            # docker-compose.yml , ./nginx/default.conf 업로드
            # 타겟 : /home/ubuntu
            - name: EC2 서버로 필요 파일 업로드(YML, nginx/*.conf)
              uses: appleboy/scp-action@v0.1.7
              # 업로드 대상이 n개이면 |로 구성
              with:
                host: ${{secrets.EC2_HOST}}
                username: ${{secrets.EC2_USERNAME}}
                key: ${{secrets.EC2_KEY}}
                source: |
                  ./docker-compose.yml, 
                  ./nginx/default.conf
                target: /home/ubuntu

    # 도커 컴포즈 진행
    deploy:
      runs-on: ubuntu-latest
      # 해당 job이 진행 되려면 사전에 반드시 다른 job이 진행되어야 함 (docker-cicd)       
      needs: docker-cicd
      steps:
        - name: EC2에 ssh 접속 -> 도커 컴포즈 가동 -> 서비스 세팅 완료
          uses: appleboy/ssh-action@v1.1.0
          with:
            host: ${{secrets.EC2_HOST}}
            username: ${{secrets.EC2_USERNAME}}
            key: ${{secrets.EC2_KEY}}
            script_stop: true
            # 이미지를 갱신하지는 않는다. -> 도커컴포즈 파일에 기술하여 버전관리 할 수 있다. 
            # 이미지에 TAG를 기입하여 버전을 관리한다면 매번 이미지를 갱신해야 한다.
            script: |
              sudo docker compose down
              sudo docker compose up -d
